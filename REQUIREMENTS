-*- mode: Text; -*-
$Id: REQUIREMENTS,v 1.3 2002/01/25 17:31:20 alexis Exp $


NSD Requirements and Specifications
______________________________________________________________________

A. Scope.

nsd is a complete implementation of an autoritative DNS
nameserver. This document describes the basic requirements and
specifications for this implementation.

B. Requirements

B.1. General Requirements 

These requirements are in order of importance:

1. Conformity to the relevant DNS RFCs

   If complying with the letter of the RFCs will cause a conflict with
   high load resilience reasoned trade-offs will be made and
   documented.

2 Code diversity from other implementations

   nsd is developed from scratch and does not share code or design
   with other implementations.

3. Authoritative server only

   nsd is designed to provide authoritative answers only.  There are
   no facilities for caching or recursion.

4. Open source

   The code will be open source after the first public release.

5. Regression tested against bind8/9

   Extensive regression tests with real trace data and synthetic
   exceptional data will be carried out. For the real traces any
   differences with bind8/9 will be documented. Should there be
   substantial differences a bind8/9 compatibility option will be
   considered. The testing tools will be published separately as much
   as possible.

6. Resilience to high load

   As many as UDP queries answered as possible per time interval.
   Aware of useless queries and limiting answers to conserve output
   bandwith. This may superside strict RFC compliance.  Mitigation of
   DDoS attacks as far as feasible.

7. Documentation

   The implementation will be well documented with the aim of allowing
   others to understand its operation in order to be able to maintain
   the code. This includes these requirements, a general design
   document and well documented code.

8. Reviewed code
   
   All code will be reviewed by at least two(?) persons other than the
   primary author before being included in a release version.

9. Simplicity

   nsd will not do things that are not strictly necessary for its
   task: authoritative name serving. If in doubt a feature is more
   likely not to be included.

   The code strives to be as simple and straightformward as possible,
   even if it looks stupid ;-).

10. Reasonable Portability

   Should be reasonably portable across hardware architectures and OS
   platforms.  Rough targets:
   (Intel/SPARC/Alpha)(freebsd,linux,solaris)

11. maintenance for initial period

   NLnet Labs and the RIPE NCC will support NSD for at least 12(?)
   months after publication.


B.2. Explicit NON-Requirements

1. No caching

   nsd will not provide cached or recursive answers.

2. No slavish responsiveness

   nsd may decide to limit answers to queries it considers malicious
   or useless if this enables it to provide better service to queries
   it considers valid. Conserving output bandwidth is a consideration.

3. No end-user friendliness

  nsd operators are considered to have basic Unix and networking
  knowledge and are also considered to be able to read and understand
  reasonably written user documentation.

4. No creeping featurism

   nsd will not implement any functionality that is not strictly
   necessary for the task of authoritative name serving.  Examples:
   round robin sequence of RRset members in consecutive answers,




C. Technical Specification.

C.0 Environment

   The server runs with the least possible permissions.

C.1. Zone file format and RR records.

   Zone file format as specified in rfc1035 (5.1), including the $TTL
   entry for default TTL as in rfc2308 (4) and the binary label format
   as in rfc2673. (binary label not supported in beta).

   We implement all RRs currently assigned by IANA
   (http://www.iana.org/assignments/dns-parameters) except for RRs
   that are obsoleted by IANA, those MAY not be implemented.

   Unknown RRs are supported as in draft-ietf-dnsext-unknown-rr.

   Zone file MUST not contain errors. i.e. the loading process will fail when:
     - RRs that are obsolete and not implemented are encountered.
     - Syntax errors are found (rfc1035 5.2)
	+ not all RRs are of the same zone
	+ not exactly one SOA RR is present at the top of the zone.
	+ delegations are present but required glue is not present.
	+ Out of Zone, non-glue data is encountered.
	+ not all RRs in a RRset have the same TTL (rfc2181 5.2)

	+ if a DNAME exist at node N there may not be any other data
	  at 'N' (except CNAME or DNAME) and there MUST not be any
	  other data at subnodes of 'N' (rfc 2672 section 3).
          [DNAME not implemented in alpha]

     - The default minimum TTL is not specified.


   Only zonefiles of CLASS "IN" are supported.

   The zonefile parser sets the TTL of those RRs that do not have
   their TTL defined to the minimum TTL unless the RR is part of a
   RRset and the TTL is set for one of the RRs in the RRset.

   Parsing of the labels in zone files is case sensitive (1034  3.1)
   (Note: rfc1035 2.3.3
 
     "The basic rule is that case can be discarded only when data is
      used to define structure in a database, and two names are
      identical when compared in a case insensitive manner."  
   )


C.2. Server and connection management.

   The server listens on port 53. The server answers with the same IP
   address and port (53) as the queries has been sent to.  Replies are
   sent to the address/port the queries originated from. (rfc 2181 4)

   [IPv6 transport is not implemented in the alpha version]

   UDP.

   The server is optimized to handle UDP queries. Large packetsizes
   are supported. The size is set by the OS
   (e.g. net.inet.udp.maxdgram on FreeBSD).



   TCP. 

   The server accepts TCP connection. 

   Note ther may be one or more DNS messages in the stream. Each
   message is prepended with a 2 byte size (rfc 1035 4.2.2)

   Connection management  (rfc1035 4.2.2.)
     + the server should not block other activities waiting for TCP data

     + The server should assume that the client will initiate
       connection closing and should delay closing its end of the
       connection until all outstanding client request have been
       satisfied.

     + For closing dormant connection the timeout should be in the
       order of 2 minutes.


   NSD specific:

     + The maximum number of open TCP connections is configurable.

     It is assumed the OS copes with attacks on the TCP stack (e.g
     like SYN attacks)



C.3 Incomming DNS Message processing.

  NSD specific choises.
  These issues are not addresed in the RFCs. Behaviour is defined below.

     + Non parsable messages are replied to with a FORMERR.

     + Only the first message in a TCP message is handled. If there are
       more messages in the stream a SERVFAIL is returned.

       (Argument for this is in draft-dnsind-edns1: applicability of
	some DNS message Header flags and of RCODE fields only to
	single QNAME, QTYPE and QCLAS)


     + Each UDP packet only carries one DNS Message. Packets with
       trailing garbage are replied to with a FORMERR.

     + Incomming DNS messages with the QR bit set to 1 (response) are
       discarded. (In spirit of rfc 1035 sect 7.3)

     + RD is copied into the response (rfc 1035 4.1.1) the RA bit is
       set to 0 and the QUERYID is copied into the response message.


     + OPCODE 0 (QUERY)    results in normal handling 
					     of packet (rfc1035)
       OPCODE 1 (IQUERY)   results in  RCODE=4 NOTIMP  (rfc1035)
       OPCODE 2 (STATUS)   results in  RCODE=4 NOTIMP  (rfc1035)
       OPCODE 3 (RESERVED) results in  RCODE=4 NOTIMP 
       OPCODE 4 (NOTIFY)   results in  RCODE=4 NOTIMP  (rfc1035)
       OPCODE 5 (UPDATE)   results in  RCODE=4 NOTIMP  (rfc2136 sect 3)

     + AA bit in query packet is ignored.

     [***OK: does this mean you only want authoritative answer.]

     + TC bit is set on a query packet is replied to with FORMERR.

     [This must allways be a broken implementation since the max
      length of the name is 255 octets.]


     + RCODES are ignored.



     + QDCOUNT=0 results in RCODE=1  FORMERR.
       QDCOUNT=1 results in further processing.
       QDCOUNT>1 results in RCODE=4  NOTIMP.
 
     + Other sections should be empty otherwise FORMERR 

     + QCLASS=IN results in further processing.

     + QCLASS=ANY results in further processing with the AA bit in the
       response off (rfc 1034 6.2)

       [OK***: BIND 8 does not return authority with an CLASS=ANY
        query.  This needs a little further research]

    
    + QCLASS!=IN && QCLASS!=ANY results in RCODE=REFUSED

      [OK***: BIND8 generates a SERVFAIL but I would say that a A
              NOERROR message with empty Answer, Authority and
              Additional section is also a good answer and more in the
              spirrit of RFC 1034 section 4.3.1.

	      For now I choose to mimic the behaviour of bind.

	      BIND9 generates a status RCODE=5 REFUSED.
      ]



    + Presence of OPT RR indicates support of EDNS (rfc2671).  If the
      VERSION > 0 then the server will respond with an OPT with
      RCODE=BADVESRION and VERSION=0 (The server supports EDNS0) In
      further processing ENDS0 support is taken into account.
      [not implemented in alpha]
 
C 4  Further Query processing.

  Preconditions: 

   + the QCLASS is either IN or ANY. For both classes the IN class
     zones are searched in the same maner. The difference in the
     response will be in the Authority information.

   + It is known if the requester supports EDNS0 [not implemented in alpha]

   + There is only one query in the DNS message to be answered. 

   + The RD & message ID of the incomming querry has been copied into
     the response message.


C 4.1 Actions based on QTYPE of incomming Query.

  If QTYPE>=249 we are dealing with special queries.

   case QTYPE=TKEY

   case QTYPE=TSIG

   case QTYPE=IXFR respond the same way as QTYPE=AXFR (rfc1995 4) i.e. respond
		   with RCODE=5 (REFUSED)


   case QTYPE=AXFR respond with RCODE=5 (REFUSED) [OK***: better than NOTIMPL]

   NOTE: AXFR may be supported in a later version of the server.

     
   case QTYPE=MAILB respond with RCODE=4 (NOTIMP) 
	This TYPE of query is marked experimental in rfc1035 8.2 we do not
        support it.

   case QTYPE=MAILA respond with RCODE=4 (NOTIMP) because it is obsolete.
	
   case QTYPE=ANY proceed with processing.

  QTYPE < 249 proccess the query



  Further proccessing of the packet is based on the algorithm from
  1034 as modified by (rfc2672 4). Below is the algorithm as applies
  to an authoritative cacheless server and with the preconditions from
  above.  We have also included DNSSEC considderations (rfc2535) and
  draft-ietf-dnsext-dnssec-okbit-03.txt

  The first versions of nsd will not have DNSSEC processing
  implemented.


   1. Search the available zones for the zone which is the nearest
      ancestor to QNAME.  If such a zone is found, go to step 2,
      otherwise step 3.

   2. Start matching down, label by label, in the zone.  The matching
      process can terminate several ways:

      a. If the whole of QNAME is matched, we have found the node.

         If the data at the node is a CNAME, and QTYPE doesn't match
         CNAME, copy the CNAME RR into the answer section of the
         response, change QNAME to the canonical name in the CNAME RR,
         and go back to step 1. If the OK bit is set in the query the
	 SIG RR of the CNAME needs to be copied in the answer section
         as well

         Otherwise, copy all RRs which match QTYPE, and their
         corresponding SIGs if the OK bit was set, into the answer
         section and go to step 4.

      b. If a match would take us out of the authoritative data, we have
         a referral.  This happens when we encounter a node with NS RRs
         marking cuts along the bottom of a zone.

         Copy the NS RRs for the subzone into the authority section of
         the reply.  Put whatever addresses are available into the
         additional section, using glue RRs if the addresses are not
         available from authoritative data. If the OK bit was set then
         also copy the SIGs for the addresses for which the server is
         authoritative.  Go to step 4.

      c. If at some label, a match is impossible (i.e., the
         corresponding label does not exist), look to see whether the
         last label matched has a DNAME record.

	 [DNAME processing is not implemented in the alpha version.] 

         If a DNAME record exists at that point, copy that record into
         the answer section, if the OK bit is set also copy the SIG.

	 If substitution of its <target> for its <owner> in QNAME
         would overflow the legal size for a <domain-name>, set RCODE
         to YXDOMAIN [DNSUPD] and exit; otherwise perform the
         substitution and continue.  If the query was not extended
         [EDNS0] with a Version indicating understanding of the DNAME
         record, the server SHOULD synthesize a CNAME record as
         described above and include it in the answer section.  Go
         back to step 1. Note that there should be no descendants of a
         DNAME in the same zone (rfc2672 3). So if a DNAME has been
         found only go to step 1 if another zone can be found.

         If there was no DNAME record, look to see if the "*" label
         exists.
   

         If the "*" label does not exist, check whether the name we
         are looking for is the original QNAME in the query or a name
         we have followed due to a CNAME.  If the name is original,
         set an authoritative name error in the response and exit.
         Otherwise just exit. (Nn authoritative name error returns
         RCODE=3 NXDOMAIN and the authority section must contained the
         SOA record and, if the OK bit is set add the SIG over the SOA
         and search for the closest matching label (in the terms of
         canonical ordering) and add it's NXT reccord, also add
         appropriate KEY material in the additional section)

         If the "*" label does exist, match RRs at that node against
         QTYPE.  If any match, copy them into the answer section, but
         set the owner of the RR to be QNAME, and not the node with
         the "*" label.  If the OK bit is set copy the SIG for the *
         label and matching QTYPE also set the owner of the SIG RR to
         be QNAME)

	 Go to step 4.

   3. If a there was no delegation of authoritative data return the root
      delegation in the authority section continue with 4. 
      
      [***OK: it seems that bind9 returnes RCODE=REFUSED here for some reason]

   4. Using local data only, attempt to add other RRs which may be
      useful to the additional section of the query if the OK bit was
      set in the query then for retrieval of SOA or NS a key of the
      same name should be added. For retrieval of type A, AAAA or A6 RRs 
      the KEY should also be included.




  Note that on a QNAME match the NS records are not copied into the AUTH
  section (This is a requirement from step 4 'matching down the cache'
  from rfc1034 4.3.2).  This is a requirement only for caching
  servers. BIND8 will copy the the NS in the Auth section for
  authoritative server too.


C 4.? Additional Data processing.


  Additional data is added as long as there is space in the packet.


  If inclussion of an RRset in the Additional section is not possible
  the entire RRset is not included.  Ommission of RRs from the
  Additional section because of message size constraints will NOT lead
  to setting of the TC bit. (rfc2181 9)

  When processing the additional section priority is (rfc 2535 3.5 and
  rfc 2974 4) 
      + A 
      + A6 
      + AAAA 
      + KEY



C 4.? Label compression in RDATA

  In the spirrit of RFC 1035 section 3.3. and 4.4.1 ("Pointers can
  only be used for occurances of a domain name where the format is not
  class specific.") We only do label compression for labels in rdata
  for which this is specifically mentioned in the RFC defining the RR.


   -NS, SOA, CNAME, and PTR (rfc 1035 3.3)

    Others defined in (rfc 1035 3.3) are not compressed.

    BIND8 does compression for all RR from rfc 1035 for which dnames
    apear in the rdata.

    (Note that other RFCs do refer to e.g. MX dname in rdata being
    compressed (e.g. rfc2974 4.).

   -AFSDB, RP, RT   (rfc1183, Section 1,2 & 3.3.3)

    The format of these RR does is not CLASS specific so compression
    is done for:
    dname of the 'hostname' field for AFSDB
    dname of the 'mbox-dname' and 'txt-dname' for RP
    dname of the 'intermediate-host' for RT.
        
    
    SIG signers name field MAY be compressed.  (2535 4.1.7)
    NXT dname field MAY be compressed.  (2535 4.2)




  For RRs not mentioned here no label compression in the rdata is
  performed.



C 4.? Truncation handling. (as rfc2181 9)

  If inclussion of a RR set that is REQUIRED in either the answer or 
  authority section leads to message truncation. The packet is left empty 
  and the truncation (TC) bit is set.


  If inclussion of a resource record in the Additional section is not possible
  that resource reecord is not included.  Ommission of resource record from the
  Additional section because of message size constraints will NOT lead
  to setting of the TC bit. (rfc2181 9)


Appendix  A

IANA list of RR records


RR records details.
  "A"        1,    # RFC 1035, Section 3.4.1
		   No additional processing

  "NS"       2,    # RFC 1035, Section 3.3.11
		   Additional A type processing.
		   dname compression in RDATA
		   
  "MD"       3,    # RFC 1035, Section 3.3.4 (obsolete)
  "MF"       4,    # RFC 1035, Section 3.3.5 (obsolete)

  "CNAME"    5,    # RFC 1035, Section 3.3.1
                   No additional section processing.
		   dname compression in RDATA

  "SOA"      6,    # RFC 1035, Section 3.3.13
                   No additional section processing.
		   SOA TTL semantics updated by rfc2308
		   dname compression in RDATA
		   
  "MB"       7,    # RFC 1035, Section 3.3.3
		   Additional processing type A of MADNAME


  "MG"       8,    # RFC 1035, Section 3.3.6
                   No additional section processing.

  "MR"       9,    # RFC 1035, Section 3.3.8
                   No additional section processing.



  "NULL"     10,    # RFC 1035, Section 3.3.10
		    NOT IMPLEMENTED
		    Not allowed in master files. (Not implemented in BIND)

		    		    

  "WKS"      11,    # RFC 1035, Section 3.4.2 (deprecated in favour of MX
					      [RFC-1123] but not Obsolete)


  "PTR"      12,    # RFC 1035, Section 3.3.12
                    No additional section processing.
  		    dname compression in RDATA


  "HINFO"    13,    # RFC 1035, Section 3.3.2
                    No additional section processing.

  "MINFO"    14,    # RFC 1035, Section 3.3.7
                   No additional section processing.

  "MX"       15,    # RFC 1035, Section 3.3.9
		    Additional section processing type A of host in Exchange

  "TXT"      16,    # RFC 1035, Section 3.3.14
                    No additional section processing.
 
  "RP"       17,    # RFC 1183, Section 2.2
                    No additional section processing.

  "AFSDB"    18,    # RFC 1183, Section 1
                    type A additional section processing for <hostname>
		    dname compression for hostname		    

  "X25"      19,    # RFC 1183, Section 3.1
                    No additional section processing.


  "ISDN"     20,    # RFC 1183, Section 3.2
                    No additional section processing.

  "RT"       21,    # RFC 1183, Section 3.3
		    type   X25, ISDN, and A additional section processing 
                    for <intermediate-host>.
		    dname compression for intermediate-host.


  "NSAP"     22,    # RFC 1706, Section 5
		     No additional section processing.
		     NSAP requires special parsing rules.


  "NSAP_PTR" 23,    # RFC 1348 (obsolete)

  "SIG"      24,    # RFC 2535, Section 
		    4.1.7: signers name field MAY be compressed.
		    4.1.8.1: SIG(0) specification.

		    See section 4.2 for additional section processing.
		    SIG signers name field MAY be compressed.  (2535 4.1.7)

  "KEY"      25,    # RFC 2535, Section 

		    See section RFC 2535 3.5 on inclusion of keys.

  "PX"       26,    # RFC 2163,

		    section 4 sais:

   		    PX records cause no additional section processing
		    
  		    All normal DNS conventions, like default values,
		       wildcards, abbreviations and message
		       compression, apply also for all the components
		       of the PX RR.
		    
		    Compression is not explicitly mentioned:   
		    This label is CLASS specific: NO compression.

		    
  "GPOS"     27,    # RFC 1712 (obsolete)
  "AAAA"     28,    # RFC 1886, Section 2.1
  "LOC"      29,    # RFC 1876
		     OK: No requirements on additional section processing.

  "NXT"      30,    # RFC 2535
		     OK: No requirements on additional section processing.
		     NXT dname field MAY be compressed.  (2535 4.2)


  "EID"      31,    # draft-ietf-nimrod-dns-xx.txt e.g. http://ana-3.lcs.mit.edu/~jnc/nimrod/dns.txt

  "NIMLOC"   32,    # draft-ietf-nimrod-dns-xx.txt e.g. http://ana-3.lcs.mit.edu/~jnc/nimrod/dns.txt

  "SRV"      33,    # RFC 2782
		    No dname compression of target field. (rfc2782 page 4)


  "ATMA"     34,    # [Dobrowski]
		    

  "NAPTR"    35,    # RFC 2168, 2915
		    Contains regular expressions. Take care of escaping 
		    backslashes while parsing
		    (rfc2915 p6): 'Replacement' field: no compression

  "KX"       36,    # RFC 2230

		    KX records MUST cause type A additional section
		    processing for the host specified by EXCHANGER.
		    In the event that the host processing the DNS
		    transaction supports IPv6, KX records MUST also
		    cause type AAAA additional section processing.

		    The KX RDATA field MUST NOT be compressed. 
		    (rfc2230 section 3)


  "CERT"     37,    # RFC 2538
		    No dnames in rdata


  "A6"       38,    # RFC 2874
		    No dnames in rdata

  "DNAME"    39,    # RFC 2672

		    NO dname compression of target field. (rfc2672 sect 3)

  "SINK"     40,    # [Eastlake]

  "OPT"      41,    # RFC 2671
		    OK: Pseudo RR. Not in zone files. Could be in Query.

  "APL"      42	    # RFC 3123   
		    An APL RR with empty RDATA is valid and implements an empty list.




  "DS"       93,    # Not ASSIGNED YET...!!! draft
  "UINFO"    100,   # [IANA-Reserved]
  "UID"      101,   # [IANA-Reserved]
  "GID"      102,   # [IANA-Reserved]
  "UNSPEC"   103,   # [IANA-Reserved]
  "TKEY"     249,   # RFC 2930
  "TSIG"     250,   # RFC 2845
  "IXFR"     251,   # RFC 1995
  "AXFR"     252,   # RFC 1035
  "MAILB"    253,   # RFC 1035 (MB, MG, MR)
  "MAILA"    254,   # RFC 1035 (obsolete - see MX)
  "ANY"     255,    # RFC 1035


______________________________________________________________________
$Id: REQUIREMENTS,v 1.3 2002/01/25 17:31:20 alexis Exp $
