#!@shell@
#
# nsdc.sh -- a shell script to manage the beast
#
# Copyright (c) 2001-2006, NLnet Labs. All rights reserved.
#
# See LICENSE for the license.
#
#

# configuration file default
configfile="@nsdconfigfile@"

# The directory where NSD binaries reside
sbindir="@sbindir@"

# how verbose is zonec run. Specificy Nothing (empty string), -v or -vv.
ZONEC_VERBOSE=-v

#
# You sure heard this many times before: NO USER SERVICEABLE PARTS BELOW
#

# see if user selects a different config file, with -c <filename>
if test "x$1" = "x-c"; then
	shift
	if [ -e $1 ]; then
		configfile=$1
		shift
	else
		echo "`basename $0`: Config file "$1" does not exist."
		exit 1
	fi
fi

# locate nsd-checkconf : in sbindir, PATH, nsdc_dir or .
nsd_checkconf=""
if [ -e ${sbindir}/nsd-checkconf ]; then
	nsd_checkconf=${sbindir}/nsd-checkconf
else
	if which nsd-checkconf >/dev/null 2>&1 ; then
		nsd_checkconf=`which nsd-checkconf`
	fi
	if [ -z "${nsd_checkconf}" -a -e `dirname $0`/nsd-checkconf ]; then
		nsd_checkconf=`dirname $0`/nsd-checkconf
	fi
	if [ -z "${nsd_checkconf}" -a -e ./nsd-checkconf ]; then
		nsd_checkconf=./nsd-checkconf
	fi
	if [ -z "${nsd_checkconf}" ]; then
		echo "`basename $0`: Could not find nsd programs" \
			"in $sbindir, in PATH=$PATH, in cwd=`pwd`," \
			"or in dir of nsdc=`dirname $0`"
		exit 1
	fi
fi

usage() {
	echo "Usage: `basename $0` [-c configfile] {start|stop|reload|rebuild|restart|" >&2
	echo "				running|update|notify|patch}" >&2
	echo "options:" >&2
	echo "	-c configfile	Use specified configfile (default: @nsdconfigfile@)". >&2
	echo "commands:" >&2
	echo "	start		Start nsd server." >&2
	echo "	stop		Stop nsd server." >&2
	echo "	reload		Nsd server reloads database file." >&2
	echo "	rebuild		Compile database file from zone files." >&2
	echo "	restart		Stop the nsd server and start it again." >&2
	echo "	running		Prints message and exit nonzero if server not running." >&2
	echo "	update		Try to update all slave zones hosted on this server." >&2
	echo "	notify		Send notify messages to all secondary servers." >&2
	echo "	patch		Merge zone transfer changes back to zone files." >&2
}

# check the config syntax before using it
${nsd_checkconf} ${configfile}
if test $? -ne 0 ; then
	usage
	exit 1
fi

# Read some settings from the config file.
dbfile=`${nsd_checkconf} -o database ${configfile}`
pidfile=`${nsd_checkconf} -o pidfile ${configfile}`
lockfile="${dbfile}.lock"  # still needed
sbindir=`dirname ${nsd_checkconf}`
# for bash: -C or noclobber. For tcsh: noclobber. For bourne: -C.
noclobber_set="set -C"
# ugly check for tcsh
if echo @shell@ | grep tcsh >/dev/null; then
	noclobber_set="set noclobber"
fi

#
# useful routines
#
signal() {
	if [ -s ${pidfile} ]
	then
		kill -"$1" `cat ${pidfile}` && return 0
	else
		echo "nsd is not running"
	fi
	return 1
}

lock() {
        (umask 222; ${noclobber_set}; echo "database locked by PID: $$" >${lockfile}) ||
                (cat ${lockfile} ; echo "aborting..." ; exit 1)
	[ $? = 0 ] || exit 1
}

unlock() {
	rm -f ${lockfile}
}

do_start() {
[ -x ${sbindir}/nsd ] && ${sbindir}/nsd -c ${configfile} 
}

do_stop() {
	signal "TERM"
}

do_reload() {
	signal "HUP"
}

# send_updates zone_name {ip_spec key_spec}
send_updates() {
	local zonename=$1
	shift
	# extract port number (if any) 
	port=`${nsd_checkconf} -o port ${configfile}`
	if test -n "${port}"; then
		port="-p ${port}"
	fi
	update_sent="no"

	while (($# > 0)); do
		ip_spec=$1
		key_spec=$2
		shift 2
		# only if localhost is allowed.
		# see if zone has 127.0.0.1 or ::1 as allowed.
		if test Z${ip_spec} = "Z127.0.0.1" -o Z${ip_spec} = "Z::1"; then
			secret=""
			if test K${key_spec} != KNOKEY -a K${key_spec} != KBLOCKED; then
				secret=`${nsd_checkconf} -s ${key_spec} ${configfile}`
				secret="-y ${key_spec}:${secret}"
			fi
			if test K${key_spec} != KBLOCKED; then
				#echo "${sbindir}/nsd-notify ${port} " \
				#"-z ${zonename} ${ip_spec} # with ${key_spec}"
				${sbindir}/nsd-notify ${port} ${secret} \
				-z ${zonename} ${ip_spec} && update_sent="yes"
			fi
		fi
	done
	if test ${update_sent} = no; then
		req_xfr=`${nsd_checkconf} -z "${zonename}" -o request-xfr ${configfile}`
		if test -n "${req_xfr}"; then
			# must be a slave zone (has request-xfr).
			echo "`basename $0`: Could not update slave zone ${zonename}: not configured (with allow-notify: 127.0.0.1 or ::1)"
		fi
	fi
}

# send_notify zone_name {ip_spec key_spec}
send_notify() {
	local zonename=$1
	shift
	while (($# > 0)); do
		ip_spec=$1
		key_spec=$2
		shift 2
		secret=""
		if test K${key_spec} != KNOKEY -a K${key_spec} != KBLOCKED; then
			secret=`${nsd_checkconf} -s ${key_spec} ${configfile}`
			secret="-y ${key_spec}:${secret}"
		fi
		if test K${key_spec} != KBLOCKED; then
			port=""
			ipaddr=${ip_spec}
			if echo ${ip_spec} | grep @ >/dev/null; then
				port="-p "`echo ${ip_spec} | sed -e 's/[^@]*@\([0-9]*\)/\1/'`
				ipaddr=`echo ${ip_spec} | sed -e 's/\([^@]*\)@[0-9]*/\1/'`
			fi
			${sbindir}/nsd-notify ${port} ${secret} -z ${zonename} ${ipaddr}
		fi
	done
}

do_rebuild() {
	lock && \
	  ${sbindir}/zonec ${ZONEC_VERBOSE} -c ${configfile} -f ${dbfile}.$$ && \
	  mv ${dbfile}.$$ ${dbfile}
	result=$?
	unlock
	[ $result != 0 ] && echo "${dbfile} is unmodified"
	rm -f ${dbfile}.$$
	return ${result}
}

case "$1" in
start)
	do_start
	;;
stop)
	do_stop
	;;
stats)
	signal "USR1"
	;;
reload)
	do_reload
	;;
running)
	signal "0"
	;;
patch)
        # patch queue clearen
	file=`${nsd_checkconf} -o difffile ${configfile}`
	if test -s ${file}; then
		#${sbindir}/nsd-patch -c ${configfile} -x ${file} -l #debug
		#echo ${sbindir}/nsd-patch -c ${configfile} -x ${file}
		if lock && \
		  mv ${file} ${file}.$$ && \
		  ${sbindir}/nsd-patch -c ${configfile} -x ${file}.$$ \
		  && rm -f ${file}.$$ && unlock && do_rebuild; then
			do_reload
		else
			unlock
			# try to move back the transfer data
			if [ -e ${file}.$$ -a ! -e ${file} ]; then
				mv ${file}.$$ ${file}
			fi
			echo "`basename $0`: patch failed."
		fi
	else
		echo "`basename $0`: no patch necessary."
	fi
        ;;
rebuild)
	do_rebuild
	;;
update)
        # send notifies to localhost for all zones that allow it
	if [ -s ${pidfile} ]; then
		zoneslist=`${nsd_checkconf} -o zones ${configfile}`
		for zonename in ${zoneslist}; do
			notify_allow=`${nsd_checkconf} -z "${zonename}" -o allow-notify ${configfile}`
			send_updates ${zonename} ${notify_allow}
		done
	else
		echo "nsd is not running"
	fi
	;;
notify)
	# send notifies to all slaves
	zoneslist=`${nsd_checkconf} -o zones ${configfile}`
	for zonename in ${zoneslist}; do
		notify=`${nsd_checkconf} -z "${zonename}" -o notify ${configfile}`
		send_notify ${zonename} $notify
	done
	;;
restart)
	do_stop && sleep 1 && do_start
	;;
*)
	usage
	;;
esac

exit $?
