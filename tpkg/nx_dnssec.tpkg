#!/bin/sh
# This is a shell archive (produced by GNU sharutils 4.2.1).
# To extract the files from this archive, save it to some FILE, remove
# everything before the `!/bin/sh' line above, then type `sh FILE'.
#
# Made on 2006-04-20 11:35 CEST by <miekg@floep>.
# Source directory was `/home/miekg/svn/nsd/trunk/tpkg/nx_dnssec.dir'.
#
# Existing files will *not* be overwritten unless `-c' is specified.
#
# This shar contains:
# length mode       name
# ------ ---------- ------------------------------------------
#     48 -rw------- nx_dnssec.conf
#     94 -rw------- nx_dnssec.current_respons1
#     94 -rw------- nx_dnssec.current_respons2
#    409 -rw------- nx_dnssec.dsc
#    286 -rw------- nx_dnssec.help
#     94 -rw------- nx_dnssec.known_good_respons1
#     94 -rw------- nx_dnssec.known_good_respons2
#    518 -rw------- nx_dnssec.post
#    626 -rw------- nx_dnssec.pre
#    669 -rw------- nx_dnssec.test
#    711 -rw------- nx_dnssec.zone
#
save_IFS="${IFS}"
IFS="${IFS}:"
gettext_dir=FAILED
locale_dir=FAILED
first_param="$1"
for dir in $PATH
do
  if test "$gettext_dir" = FAILED && test -f $dir/gettext \
     && ($dir/gettext --version >/dev/null 2>&1)
  then
    set `$dir/gettext --version 2>&1`
    if test "$3" = GNU
    then
      gettext_dir=$dir
    fi
  fi
  if test "$locale_dir" = FAILED && test -f $dir/shar \
     && ($dir/shar --print-text-domain-dir >/dev/null 2>&1)
  then
    locale_dir=`$dir/shar --print-text-domain-dir`
  fi
done
IFS="$save_IFS"
if test "$locale_dir" = FAILED || test "$gettext_dir" = FAILED
then
  echo=echo
else
  TEXTDOMAINDIR=$locale_dir
  export TEXTDOMAINDIR
  TEXTDOMAIN=sharutils
  export TEXTDOMAIN
  echo="$gettext_dir/gettext -s"
fi
if touch -am -t 200112312359.59 $$.touch >/dev/null 2>&1 && test ! -f 200112312359.59 -a -f $$.touch; then
  shar_touch='touch -am -t $1$2$3$4$5$6.$7 "$8"'
elif touch -am 123123592001.59 $$.touch >/dev/null 2>&1 && test ! -f 123123592001.59 -a ! -f 123123592001.5 -a -f $$.touch; then
  shar_touch='touch -am $3$4$5$6$1$2.$7 "$8"'
elif touch -am 1231235901 $$.touch >/dev/null 2>&1 && test ! -f 1231235901 -a -f $$.touch; then
  shar_touch='touch -am $3$4$5$6$2 "$8"'
else
  shar_touch=:
  echo
  $echo 'WARNING: not restoring timestamps.  Consider getting and'
  $echo "installing GNU \`touch', distributed in GNU File Utilities..."
  echo
fi
rm -f 200112312359.59 123123592001.59 123123592001.5 1231235901 $$.touch
#
if mkdir _sh04920; then
  $echo 'x -' 'creating lock directory'
else
  $echo 'failed to create lock directory'
  exit 1
fi
# ============= nx_dnssec.conf ==============
if test -f 'nx_dnssec.conf' && test "$first_param" != -c; then
  $echo 'x -' SKIPPING 'nx_dnssec.conf' '(file already exists)'
else
  $echo 'x -' extracting 'nx_dnssec.conf' '(text)'
  sed 's/^X//' << 'SHAR_EOF' > 'nx_dnssec.conf' &&
zone:
X	name: miek.nl 
X	zonefile: nx_dnssec.zone
SHAR_EOF
  (set 20 06 03 06 12 35 16 'nx_dnssec.conf'; eval "$shar_touch") &&
  chmod 0600 'nx_dnssec.conf' ||
  $echo 'restore of' 'nx_dnssec.conf' 'failed'
  if ( md5sum --help 2>&1 | grep 'sage: md5sum \[' ) >/dev/null 2>&1 \
  && ( md5sum --version 2>&1 | grep -v 'textutils 1.12' ) >/dev/null; then
    md5sum -c << SHAR_EOF >/dev/null 2>&1 \
    || $echo 'nx_dnssec.conf:' 'MD5 check failed'
033b70032f95011ddb8d2e53b6b62bf5  nx_dnssec.conf
SHAR_EOF
  else
    shar_count="`LC_ALL= LC_CTYPE= LANG= wc -c < 'nx_dnssec.conf'`"
    test 48 -eq "$shar_count" ||
    $echo 'nx_dnssec.conf:' 'original size' '48,' 'current size' "$shar_count!"
  fi
fi
# ============= nx_dnssec.current_respons1 ==============
if test -f 'nx_dnssec.current_respons1' && test "$first_param" != -c; then
  $echo 'x -' SKIPPING 'nx_dnssec.current_respons1' '(file already exists)'
else
  $echo 'x -' extracting 'nx_dnssec.current_respons1' '(text)'
  sed 's/^X//' << 'SHAR_EOF' > 'nx_dnssec.current_respons1' &&
miek.nl.		86400	IN	SOA	open.nlnetlabs.nl. miekg.atoom.net. 2005061300 14400 3600 604800 86400
SHAR_EOF
  (set 20 05 11 14 14 28 51 'nx_dnssec.current_respons1'; eval "$shar_touch") &&
  chmod 0600 'nx_dnssec.current_respons1' ||
  $echo 'restore of' 'nx_dnssec.current_respons1' 'failed'
  if ( md5sum --help 2>&1 | grep 'sage: md5sum \[' ) >/dev/null 2>&1 \
  && ( md5sum --version 2>&1 | grep -v 'textutils 1.12' ) >/dev/null; then
    md5sum -c << SHAR_EOF >/dev/null 2>&1 \
    || $echo 'nx_dnssec.current_respons1:' 'MD5 check failed'
413753fa17989e80936ce64587f758f6  nx_dnssec.current_respons1
SHAR_EOF
  else
    shar_count="`LC_ALL= LC_CTYPE= LANG= wc -c < 'nx_dnssec.current_respons1'`"
    test 94 -eq "$shar_count" ||
    $echo 'nx_dnssec.current_respons1:' 'original size' '94,' 'current size' "$shar_count!"
  fi
fi
# ============= nx_dnssec.current_respons2 ==============
if test -f 'nx_dnssec.current_respons2' && test "$first_param" != -c; then
  $echo 'x -' SKIPPING 'nx_dnssec.current_respons2' '(file already exists)'
else
  $echo 'x -' extracting 'nx_dnssec.current_respons2' '(text)'
  sed 's/^X//' << 'SHAR_EOF' > 'nx_dnssec.current_respons2' &&
miek.nl.		86400	IN	SOA	open.nlnetlabs.nl. miekg.atoom.net. 2005061300 14400 3600 604800 86400
SHAR_EOF
  (set 20 05 11 14 14 28 51 'nx_dnssec.current_respons2'; eval "$shar_touch") &&
  chmod 0600 'nx_dnssec.current_respons2' ||
  $echo 'restore of' 'nx_dnssec.current_respons2' 'failed'
  if ( md5sum --help 2>&1 | grep 'sage: md5sum \[' ) >/dev/null 2>&1 \
  && ( md5sum --version 2>&1 | grep -v 'textutils 1.12' ) >/dev/null; then
    md5sum -c << SHAR_EOF >/dev/null 2>&1 \
    || $echo 'nx_dnssec.current_respons2:' 'MD5 check failed'
413753fa17989e80936ce64587f758f6  nx_dnssec.current_respons2
SHAR_EOF
  else
    shar_count="`LC_ALL= LC_CTYPE= LANG= wc -c < 'nx_dnssec.current_respons2'`"
    test 94 -eq "$shar_count" ||
    $echo 'nx_dnssec.current_respons2:' 'original size' '94,' 'current size' "$shar_count!"
  fi
fi
# ============= nx_dnssec.dsc ==============
if test -f 'nx_dnssec.dsc' && test "$first_param" != -c; then
  $echo 'x -' SKIPPING 'nx_dnssec.dsc' '(file already exists)'
else
  $echo 'x -' extracting 'nx_dnssec.dsc' '(text)'
  sed 's/^X//' << 'SHAR_EOF' > 'nx_dnssec.dsc' &&
BaseName: nx_dnssec
Version: 1.0
Description: query with +dnssec for non-existing dom.
CreationDate: Mon Nov 14 14:21:04 CET 2005
Maintainer: Miek Gieben
Category: 
Component:
Depends: 0000_nsd-compile.tpkg
Help: nx_dnssec.help
Pre: nx_dnssec.pre
Post: nx_dnssec.post
Test: nx_dnssec.test
AuxFiles: nx_dnssec.zone, nx_dnssec.conf, nx_dnssec.known_good_respons1, nx_dnssec.known_good_respons2
Passed:
Failure:
SHAR_EOF
  (set 20 05 11 14 14 28 40 'nx_dnssec.dsc'; eval "$shar_touch") &&
  chmod 0600 'nx_dnssec.dsc' ||
  $echo 'restore of' 'nx_dnssec.dsc' 'failed'
  if ( md5sum --help 2>&1 | grep 'sage: md5sum \[' ) >/dev/null 2>&1 \
  && ( md5sum --version 2>&1 | grep -v 'textutils 1.12' ) >/dev/null; then
    md5sum -c << SHAR_EOF >/dev/null 2>&1 \
    || $echo 'nx_dnssec.dsc:' 'MD5 check failed'
3fae76f2afe410adbe0720d04c779665  nx_dnssec.dsc
SHAR_EOF
  else
    shar_count="`LC_ALL= LC_CTYPE= LANG= wc -c < 'nx_dnssec.dsc'`"
    test 409 -eq "$shar_count" ||
    $echo 'nx_dnssec.dsc:' 'original size' '409,' 'current size' "$shar_count!"
  fi
fi
# ============= nx_dnssec.help ==============
if test -f 'nx_dnssec.help' && test "$first_param" != -c; then
  $echo 'x -' SKIPPING 'nx_dnssec.help' '(file already exists)'
else
  $echo 'x -' extracting 'nx_dnssec.help' '(text)'
  sed 's/^X//' << 'SHAR_EOF' > 'nx_dnssec.help' &&
No arguments are needed for this test
X
When patching the 106 bug, I forgot to add a ->zone pointer to 
the soa_nx_rrset. When a dnssec query comes in NSD used this
pointer to check if a zone is secure or not. Without this pointer
you have a null pointer ref, which crashed NSD... oops!
SHAR_EOF
  (set 20 05 11 14 14 22 56 'nx_dnssec.help'; eval "$shar_touch") &&
  chmod 0600 'nx_dnssec.help' ||
  $echo 'restore of' 'nx_dnssec.help' 'failed'
  if ( md5sum --help 2>&1 | grep 'sage: md5sum \[' ) >/dev/null 2>&1 \
  && ( md5sum --version 2>&1 | grep -v 'textutils 1.12' ) >/dev/null; then
    md5sum -c << SHAR_EOF >/dev/null 2>&1 \
    || $echo 'nx_dnssec.help:' 'MD5 check failed'
7d19280d58dda78c234d22b1c412abc2  nx_dnssec.help
SHAR_EOF
  else
    shar_count="`LC_ALL= LC_CTYPE= LANG= wc -c < 'nx_dnssec.help'`"
    test 286 -eq "$shar_count" ||
    $echo 'nx_dnssec.help:' 'original size' '286,' 'current size' "$shar_count!"
  fi
fi
# ============= nx_dnssec.known_good_respons1 ==============
if test -f 'nx_dnssec.known_good_respons1' && test "$first_param" != -c; then
  $echo 'x -' SKIPPING 'nx_dnssec.known_good_respons1' '(file already exists)'
else
  $echo 'x -' extracting 'nx_dnssec.known_good_respons1' '(text)'
  sed 's/^X//' << 'SHAR_EOF' > 'nx_dnssec.known_good_respons1' &&
miek.nl.		86400	IN	SOA	open.nlnetlabs.nl. miekg.atoom.net. 2005061300 14400 3600 604800 86400
SHAR_EOF
  (set 20 05 11 14 14 27 40 'nx_dnssec.known_good_respons1'; eval "$shar_touch") &&
  chmod 0600 'nx_dnssec.known_good_respons1' ||
  $echo 'restore of' 'nx_dnssec.known_good_respons1' 'failed'
  if ( md5sum --help 2>&1 | grep 'sage: md5sum \[' ) >/dev/null 2>&1 \
  && ( md5sum --version 2>&1 | grep -v 'textutils 1.12' ) >/dev/null; then
    md5sum -c << SHAR_EOF >/dev/null 2>&1 \
    || $echo 'nx_dnssec.known_good_respons1:' 'MD5 check failed'
413753fa17989e80936ce64587f758f6  nx_dnssec.known_good_respons1
SHAR_EOF
  else
    shar_count="`LC_ALL= LC_CTYPE= LANG= wc -c < 'nx_dnssec.known_good_respons1'`"
    test 94 -eq "$shar_count" ||
    $echo 'nx_dnssec.known_good_respons1:' 'original size' '94,' 'current size' "$shar_count!"
  fi
fi
# ============= nx_dnssec.known_good_respons2 ==============
if test -f 'nx_dnssec.known_good_respons2' && test "$first_param" != -c; then
  $echo 'x -' SKIPPING 'nx_dnssec.known_good_respons2' '(file already exists)'
else
  $echo 'x -' extracting 'nx_dnssec.known_good_respons2' '(text)'
  sed 's/^X//' << 'SHAR_EOF' > 'nx_dnssec.known_good_respons2' &&
miek.nl.		86400	IN	SOA	open.nlnetlabs.nl. miekg.atoom.net. 2005061300 14400 3600 604800 86400
SHAR_EOF
  (set 20 05 11 14 14 27 40 'nx_dnssec.known_good_respons2'; eval "$shar_touch") &&
  chmod 0600 'nx_dnssec.known_good_respons2' ||
  $echo 'restore of' 'nx_dnssec.known_good_respons2' 'failed'
  if ( md5sum --help 2>&1 | grep 'sage: md5sum \[' ) >/dev/null 2>&1 \
  && ( md5sum --version 2>&1 | grep -v 'textutils 1.12' ) >/dev/null; then
    md5sum -c << SHAR_EOF >/dev/null 2>&1 \
    || $echo 'nx_dnssec.known_good_respons2:' 'MD5 check failed'
413753fa17989e80936ce64587f758f6  nx_dnssec.known_good_respons2
SHAR_EOF
  else
    shar_count="`LC_ALL= LC_CTYPE= LANG= wc -c < 'nx_dnssec.known_good_respons2'`"
    test 94 -eq "$shar_count" ||
    $echo 'nx_dnssec.known_good_respons2:' 'original size' '94,' 'current size' "$shar_count!"
  fi
fi
# ============= nx_dnssec.post ==============
if test -f 'nx_dnssec.post' && test "$first_param" != -c; then
  $echo 'x -' SKIPPING 'nx_dnssec.post' '(file already exists)'
else
  $echo 'x -' extracting 'nx_dnssec.post' '(text)'
  sed 's/^X//' << 'SHAR_EOF' > 'nx_dnssec.post' &&
# source the var file when it's there
[ -f ../.tpkg.var.master ] && source ../.tpkg.var.master
[ -f .tpkg.var.test ] && source .tpkg.var.test
# svnserve resets the path, you may need to adjust it, like this:
export PATH=/usr/local/bin:/usr/local/sbin:/sbin:/usr/sbin:/bin:/usr/bin:
X
rm -f nx_dnssec.db
X
if [ -z $TPKG_NSD_PID ]; then
X        exit 0
fi
X
# kill NSD
NSD_PID=`cat $TPKG_NSD_PID`
kill $NSD_PID 2>/dev/null
sleep 1 # should be really dead now - just to be sure kill it again
kill $NSD_PID 2>/dev/null
Xexit 0
SHAR_EOF
  (set 20 05 11 14 14 25 06 'nx_dnssec.post'; eval "$shar_touch") &&
  chmod 0600 'nx_dnssec.post' ||
  $echo 'restore of' 'nx_dnssec.post' 'failed'
  if ( md5sum --help 2>&1 | grep 'sage: md5sum \[' ) >/dev/null 2>&1 \
  && ( md5sum --version 2>&1 | grep -v 'textutils 1.12' ) >/dev/null; then
    md5sum -c << SHAR_EOF >/dev/null 2>&1 \
    || $echo 'nx_dnssec.post:' 'MD5 check failed'
dd8277cdb488123bea13e8526c500352  nx_dnssec.post
SHAR_EOF
  else
    shar_count="`LC_ALL= LC_CTYPE= LANG= wc -c < 'nx_dnssec.post'`"
    test 518 -eq "$shar_count" ||
    $echo 'nx_dnssec.post:' 'original size' '518,' 'current size' "$shar_count!"
  fi
fi
# ============= nx_dnssec.pre ==============
if test -f 'nx_dnssec.pre' && test "$first_param" != -c; then
  $echo 'x -' SKIPPING 'nx_dnssec.pre' '(file already exists)'
else
  $echo 'x -' extracting 'nx_dnssec.pre' '(text)'
  sed 's/^X//' << 'SHAR_EOF' > 'nx_dnssec.pre' &&
# source the var file when it's there
[ -f ../.tpkg.var.master ] && source ../.tpkg.var.master
# svnserve resets the path, you may need to adjust it, like this:
export PATH=/usr/local/bin:/usr/local/sbin:/sbin:/usr/sbin:/bin:/usr/bin:
X
# start NSD
((TPKG_PORT=5353+$RANDOM))
PRE="../.."
TPKG_NSD_PID="nsd.pid.$$"
TPKG_ZONEC="$PRE/zonec"
TPKG_NSD="$PRE/nsd"
X
# share the vars
echo "export TPKG_PORT=$TPKG_PORT" >> .tpkg.var.test
echo "export TPKG_NSD_PID=$TPKG_NSD_PID" >> .tpkg.var.test
X
$TPKG_ZONEC -f nx_dnssec.db -c nx_dnssec.conf && \
$TPKG_NSD -c nx_dnssec.conf -u $LOGNAME -p $TPKG_PORT -P $TPKG_NSD_PID -f nx_dnssec.db
SHAR_EOF
  (set 20 06 04 20 11 35 20 'nx_dnssec.pre'; eval "$shar_touch") &&
  chmod 0600 'nx_dnssec.pre' ||
  $echo 'restore of' 'nx_dnssec.pre' 'failed'
  if ( md5sum --help 2>&1 | grep 'sage: md5sum \[' ) >/dev/null 2>&1 \
  && ( md5sum --version 2>&1 | grep -v 'textutils 1.12' ) >/dev/null; then
    md5sum -c << SHAR_EOF >/dev/null 2>&1 \
    || $echo 'nx_dnssec.pre:' 'MD5 check failed'
8dd9bf6d117d11022d5aed2bde27f547  nx_dnssec.pre
SHAR_EOF
  else
    shar_count="`LC_ALL= LC_CTYPE= LANG= wc -c < 'nx_dnssec.pre'`"
    test 626 -eq "$shar_count" ||
    $echo 'nx_dnssec.pre:' 'original size' '626,' 'current size' "$shar_count!"
  fi
fi
# ============= nx_dnssec.test ==============
if test -f 'nx_dnssec.test' && test "$first_param" != -c; then
  $echo 'x -' SKIPPING 'nx_dnssec.test' '(file already exists)'
else
  $echo 'x -' extracting 'nx_dnssec.test' '(text)'
  sed 's/^X//' << 'SHAR_EOF' > 'nx_dnssec.test' &&
# source the var file when it's there
[ -f ../.tpkg.var.master ] && source ../.tpkg.var.master
[ -f .tpkg.var.test ] && source .tpkg.var.test
# svnserve resets the path, you may need to adjust it, like this:
export PATH=/usr/local/bin:/usr/local/sbin:/sbin:/usr/sbin:/bin:/usr/bin:
X
# normal q for non existent sub dom. Should get ref to miek.nl
dig +noall +auth @localhost -p $TPKG_PORT aaa.miek.nl > nx_dnssec.current_respons1
dig +dnssec +noall +auth @localhost -p $TPKG_PORT aaa.miek.nl > nx_dnssec.current_respons2
X
# both must be ok
wdiff nx_dnssec.known_good_respons1 nx_dnssec.current_respons1 &&\
wdiff nx_dnssec.known_good_respons2 nx_dnssec.current_respons2
SHAR_EOF
  (set 20 05 11 14 14 27 33 'nx_dnssec.test'; eval "$shar_touch") &&
  chmod 0600 'nx_dnssec.test' ||
  $echo 'restore of' 'nx_dnssec.test' 'failed'
  if ( md5sum --help 2>&1 | grep 'sage: md5sum \[' ) >/dev/null 2>&1 \
  && ( md5sum --version 2>&1 | grep -v 'textutils 1.12' ) >/dev/null; then
    md5sum -c << SHAR_EOF >/dev/null 2>&1 \
    || $echo 'nx_dnssec.test:' 'MD5 check failed'
796b1e112c615aa76a906b34959d37f2  nx_dnssec.test
SHAR_EOF
  else
    shar_count="`LC_ALL= LC_CTYPE= LANG= wc -c < 'nx_dnssec.test'`"
    test 669 -eq "$shar_count" ||
    $echo 'nx_dnssec.test:' 'original size' '669,' 'current size' "$shar_count!"
  fi
fi
# ============= nx_dnssec.zone ==============
if test -f 'nx_dnssec.zone' && test "$first_param" != -c; then
  $echo 'x -' SKIPPING 'nx_dnssec.zone' '(file already exists)'
else
  $echo 'x -' extracting 'nx_dnssec.zone' '(text)'
  sed 's/^X//' << 'SHAR_EOF' > 'nx_dnssec.zone' &&
;
; BIND data file for miek.nl for public use
;
X
$TTL    4D
$ORIGIN miek.nl.
@       IN      SOA     open.nlnetlabs.nl. miekg.atoom.net. (
X                         2005061300         ; Serial
X                             4H         ; Refresh
X                             1H         ; Retry
X                             7D         ; Expire
X                             1D )       ; Negative Cache TTL
X		IN	NS	open.nlnetlabs.nl.
X		IN	NS	omval.tednet.nl.
X		IN	NS	elektron.atoom.net.
X
X		IN	MX	20 mail.atoom.net.
X		IN	MX	20 sol.nlnetlabs.nl.
X
miek.nl.	IN	A	80.127.17.126
localhost	IN	A	127.0.0.1
a	    	IN	A	80.127.17.126
www     	IN 	CNAME 	a
text            IN      TXT     "Hallo, ik ben Miek, wie gets mit dir?"
SHAR_EOF
  (set 20 05 10 25 11 53 24 'nx_dnssec.zone'; eval "$shar_touch") &&
  chmod 0600 'nx_dnssec.zone' ||
  $echo 'restore of' 'nx_dnssec.zone' 'failed'
  if ( md5sum --help 2>&1 | grep 'sage: md5sum \[' ) >/dev/null 2>&1 \
  && ( md5sum --version 2>&1 | grep -v 'textutils 1.12' ) >/dev/null; then
    md5sum -c << SHAR_EOF >/dev/null 2>&1 \
    || $echo 'nx_dnssec.zone:' 'MD5 check failed'
7b93765587236dcddb81d3f5efe00841  nx_dnssec.zone
SHAR_EOF
  else
    shar_count="`LC_ALL= LC_CTYPE= LANG= wc -c < 'nx_dnssec.zone'`"
    test 711 -eq "$shar_count" ||
    $echo 'nx_dnssec.zone:' 'original size' '711,' 'current size' "$shar_count!"
  fi
fi
rm -fr _sh04920
exit 0
